version: "3.8"

services:
  # Use `docker compose --profile backend-dev up --build --attach-dependencies` to start a database and work and the backend.

  # Use `docker compose --profile frontend-dev up --build --attach-dependencies` to start the services needed to work on the frontend. If you want to also run the inference, add a second `--profile inference` argument.

  # The profile ci is used by CI automations. (i.e E2E testing)

  # This DB is for the FastAPI Backend.
  db:
    image: postgres:15
    pull_policy: always
    container_name: mkdi-db
    networks:
      - private
    restart: always
    profiles: ["frontend-dev", "backend-dev", "ci"]
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      BACKUP_DIR: /backup
    volumes:
      - ./docker/mkdi-postgres/backup_pg.sh:/scripts/backup_pg.sh
      - ./backup:/backup
      - backend_data:/var/lib/postgresql/data

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 2s
      timeout: 2s
      retries: 10

  pgAdmin:
    image: dpage/pgadmin4
    restart: always
    profiles: ["frontend-dev", "backend-dev"]
    environment:
      PGADMIN_DEFAULT_EMAIL: bah.amadouth96@gmail.com
      PGADMIN_DEFAULT_PASSWORD: pgadmin
      PGADMIN_LISTEN_PORT: 80
      # SCRIPT_NAME: '/pgadmin4'
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - private
    ports:
      - 8089:80

  backend:
    image: tiangolo/uvicorn-gunicorn-fastapi:python3.10
    working_dir: /backend
    container_name: mkdi-backend
    volumes:
      - "./backend:/backend"
      - "./mkdi-shared:/mkdi-shared"
      - "./bdd:/bdd"
      - "./scripts/prestart.sh:/app/prestart.sh"
      - "./scripts/start-debug.sh:/start-reload.sh"
    command: /start-reload.sh
    environment:
      - POSTGRES_HOST=mkdi-db
      - ENV=developement
      - REDIS_HOST=redis
      - DEBUG_USE_SEED_DATA=False
      - DEBUG_ALLOW_SELF_LABELING=True
      - MAX_WORKERS=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/backend
    networks:
      - private
    extra_hosts:
      - "localhost.auth.com: 172.30.0.9"
    depends_on:
      db:
        condition: service_healthy
    profiles: ["frontend-dev", "backend-dev"]
    ports:
      - "8080:8080"
      - "9696:9696" # debug port
  # The mkdi backend celery worker service.
  backend-worker:
    build:
      dockerfile: docker/Dockerfile.backend-worker
      context: .
    command: celery -A mkdi_backend.tasks.worker worker -l info
    image: mkdi-backend-worker
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
      - MAX_WORKERS=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["frontend-dev", "ci"]
    networks:
      - private
  # Redis - caching + rate limiting on BE
  redis:
    image: redis
    restart: always
    container_name: mkdi-redis
    profiles: ["frontend-dev", "backend-dev", "ci"]
    networks:
      - private
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 2s
      timeout: 2s
      retries: 10
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
  # This DB is for Web Authentication and data caching.
  webdb:
    image: postgres:15
    restart: always
    profiles: ["frontend-dev", "ci", "inference-dev"]
    container_name: mkdi-web-db
    networks:
      - private
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mkdi_web
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 2s
      timeout: 2s
      retries: 10
    volumes:
      - web_data:/var/lib/postgresql/data

  web:
    build:
      dockerfile: docker/Dockerfile.websitedev
      context: .
      args:
        - HOSTNAME=localhost
    image: mkdi-web
    container_name: mkdi-web
    networks:
      - private
    depends_on:
      webdb:
        condition: service_healthy
    ports:
      - "3000:3000"
    command: node server.js
    profiles: ["ci"]
    extra_hosts:
      - "localhost.auth.com: 172.30.0.3"
    environment:
      DATABASE_URL: postgres://postgres:postgres@mkdi-web-db/mkdi_web
      NODE_ENV: development
      AUTH_KEYCLOAK_ID: rns:mwague:portal
      AUTH_KEYCLOAK_SECRET: bmdsVvDMsh1CJ91SDaXGXTZc0DFp1Ufi
      AUTH_KEYCLOAK_ISSUER: http://localhost.auth.com:8443/auth/realms/mwague
      NEXTAUTH_SECRET: Wj58QaC7drb1TDXcsv0FGL0fn1ToYuo+OX+W+54TZS4=
      NEXTAUTH_URL: http://localhost:3000
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080
      WEB_DOMAIN: http://localhost:3000
      HOSTNAME: 0.0.0.0
      AUTH_TRUST_HOST: True

volumes:
  pgadmin:
  backend_data:
  web_data:

networks:
  private:
    external: true

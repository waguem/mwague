# ansible playbook to set up some docker containers

- name: Deploy to node
  hosts: dev
  gather_facts: true
  vars:
    stack_name: "dev"
    domain: "localhost"
    backend_domain: "backend.localhost"
    web_domain: "web.localhost"
    image_tag: latest
    backend_port: 8080
    website_port: 3000
    postgres_password: postgres
    postgres_user: postgres
    postgres_db: postgres
    web_api_key: "1234"
    auth_salt: "1234"
    auth_secret: "1234"
    base_registry: ""
    dockerhub_username: ""
    dockerhub_password: ""
  tasks:
    # reduces the chance of oom when pulling new images
    - name: Clear unused images
      community.docker.docker_prune:
        images: true

    - name: Create network
      community.docker.docker_network:
        name: "mkdi-{{ stack_name }}"
        state: present
        driver: bridge

    - name: Create stack files directory
      ansible.builtin.file:
        path: "./{{ stack_name }}"
        state: directory
        mode: 0755

    - name: Copy redis.conf to managed node
      ansible.builtin.copy:
        src: ./redis.conf
        dest: "./{{ stack_name }}/redis.conf"
        mode: 0644

    - name: Set up Redis
      community.docker.docker_container:
        name: "mkdi-{{ stack_name }}-redis"
        image: redis
        state: started
        recreate: "{{ (stack_name == 'dev') | bool }}"
        restart_policy: always
        network_mode: "proxy_{{ stack_name }}"
        healthcheck:
          test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
          interval: 2s
          timeout: 2s
          retries: 10
        command: redis-server /usr/local/etc/redis/redis.conf
        volumes:
          - "./{{ stack_name }}/redis.conf:/usr/local/etc/redis/redis.conf"

    - name: Create volumes for postgres
      community.docker.docker_volume:
        name: "mkdi-{{ stack_name }}-postgres-{{ item.name }}"
        state: present
      loop:
        - name: backend
        - name: web
    - name: Create postgres containers
      community.docker.docker_container:
        name: "mkdi-{{ stack_name }}-postgres-{{ item.name }}"
        image: postgres:15
        state: started
        pull: true
        recreate: "{{ (stack_name == 'staging') | bool }}"
        restart_policy: always
        network_mode: "proxy_{{ stack_name }}"
        env:
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          POSTGRES_DB: "{{ postgres_db }}"
        volumes:
          - "mkdi-{{ stack_name }}-postgres-{{ item.name
            }}:/var/lib/postgresql/data"
        healthcheck:
          test:
            [
              "CMD",
              "pg_isready",
              "-U",
              "{{ postgres_user }}",
              "-d",
              "{{ postgres_db }}",
            ]
          interval: 2s
          timeout: 2s
          retries: 10
        shm_size: 1G
      loop:
        - name: backend
        - name: web

    # - name: Run the minkadi mkdi-backend
    #   community.docker.docker_container:
    #     name: "mkdi-{{ stack_name }}-backend"
    #     image: "{{ base_registry }}/mkdi-backend:{{ image_tag }}"
    #     state: started
    #     recreate: true
    #     pull: true
    #     restart_policy: always
    #     network_mode: "proxy_{{ stack_name }}"
    #     env:
    #       POSTGRES_HOST: "mkdi-{{ stack_name }}-postgres-backend"
    #       POSTGRES_PASSWORD: "{{ postgres_password }}"
    #       POSTGRES_USER: "{{ postgres_user }}"
    #       POSTGRES_DB: "{{ postgres_db }}"
    #       ENV: "{{ 'production' if stack_name == 'prod' else 'development' }}"
    #       PYTHONPATH: /backend
    #       REDIS_HOST: "mkdi-{{ stack_name }}-redis"
    #       DEBUG_USE_SEED_DATA:
    #         "{{ 'true' if stack_name == 'staging' else 'false' }}"
    #       DEBUG_ALLOW_SELF_LABELING:
    #         "{{ 'true' if stack_name == 'staging' else 'false' }}"
    #       MAX_WORKERS: "1"
    #       RATE_LIMIT: "{{ 'false' if stack_name == 'staging' else 'true' }}"
    #       DEBUG_SKIP_EMBEDDING_COMPUTATION: "true"
    #       OFFICIAL_WEB_API_KEY: "{{ web_api_key }}"
    #       AUTH_SALT: "{{ auth_salt }}"
    #       AUTH_SECRET: "{{ auth_secret }}"
    #       KC_SERVER_URL: "{{lookup('ansible.builtin.env', 'KC_SERVER_URL') }}"
    #       KC_REALM: "{{lookup('ansible.builtin.env', 'KC_REALM') }}"
    #       KC_CLIENT_ID: "{{lookup('ansible.builtin.env', 'KC_CLIENT_ID') }}"
    #       KC_CLIENT_SECRET:
    #         "{{lookup('ansible.builtin.env', 'KC_CLIENT_SECRET') }}"
    #       KC_AUTHORIZATION_URL:
    #         "{{lookup('ansible.builtin.env', 'KC_AUTHORIZATION_URL') }}"
    #       KC_TOKEN_URL: "{{lookup('ansible.builtin.env', 'KC_TOKEN_URL') }}"
    #       KC_VERIFY_CERTS:
    #         "{{ 'true' if lookup('ansible.builtin.env', 'KC_VERIFY_CERTS') == 'enabled' else 'false'}}"
    #     ports:
    #       - "{{ backend_port }}:8080"
    #     labels:
    #       traefik.enable: "true"
    #       traefik.docker.network: proxy_{{ stack_name }}
    #       # http redirect router
    #       traefik.http.routers.mkdi-backend.rule: "Host(`{{ backend_domain }}`)"
    #       traefik.http.routers.mkdi-backend.entrypoints: web
    #       traefik.http.routers.mkdi-backend.middlewares: mkdi-backend-https-redirect
    #       traefik.http.middlewares.mkdi-backend-https-redirect.redirectscheme.scheme: https
    #       traefik.http.routers.mkdi-backend.priority: "1"
    #       # https router
    #       traefik.http.routers.mkdi-backend-secure.tls: "true"
    #       traefik.http.routers.mkdi-backend-secure.entrypoints: websecure
    #       traefik.http.routers.mkdi-backend-secure.rule:
    #         "Host(`{{ backend_domain }}`)"
    #       traefik.http.routers.mkdi-backend-secure.tls.certresolver: cloudflare
    #       traefik.http.routers.mkdi-backend-secure.tls.domains[0].main:
    #         "{{ domain }}"
    #       traefik.http.routers.mkdi-backend-secure.tls.domains[0].sans:
    #         "*.{{ domain }}"

    #       traefik.http.services.mkdi-backend-https.loadbalancer.server.port: "8080"
    #       traefik.http.routers.mkdi-backend-secure.service: mkdi-backend-https

    - name: Run the minkadi mkdi-web frontend
      community.docker.docker_container:
        name: "mkdi-{{ stack_name }}-web"
        image: "{{ base_registry }}/mkdi-web:{{ image_tag }}"
        state: started
        recreate: true
        pull: true
        restart_policy: always
        network_mode: "proxy_{{ stack_name }}"
        ports:
          - "{{ website_port }}:3000"
        command: sh wait-for-postgres.sh node server.js
        env:
          POSTGRES_HOST: "mkdi-{{ stack_name }}-postgres-web"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_DB: "{{ postgres_db }}"
          REDIS_HOST: "mkdi-{{ stack_name }}-redis"
          NEXTAUTH_SECRET:
            "{{ lookup('ansible.builtin.env', 'NEXTAUTH_SECRET') }}"
          KEYCLOAK_CLIENT_ID:
            "{{ lookup('ansible.builtin.env', 'KEYCLOAK_CLIENT_ID') }}"
          KEYCLOAK_CLIENT_SECRET:
            "{{ lookup('ansible.builtin.env', 'KEYCLOAK_CLIENT_SECRET') }}"
          KEYCLOAK_ISSUER:
            "{{ lookup('ansible.builtin.env', 'KEYCLOAK_ISSUER') }}"
          NODE_ENV: production
          DATABASE_URL:
            "postgres://{{ postgres_user }}:{{ postgres_password }}@mkdi-{{
            stack_name }}-postgres-web/{{ postgres_db }}"
        labels:
          traefik.enable: "true"
          traefik.docker.network: proxy_{{ stack_name }}
          # http redirect router
          traefik.http.routers.mkdi-web.rule: "Host(`{{ web_domain }}`)"
          traefik.http.routers.mkdi-web.entrypoints: web
          traefik.http.routers.mkdi-web.middlewares: mkdi-web-https-redirect
          traefik.http.middlewares.mkdi-web-https-redirect.redirectscheme.scheme: https
          traefik.http.routers.mkdi-web.priority: "1"
          # https router
          traefik.http.routers.mkdi-web-secure.tls: "true"
          traefik.http.routers.mkdi-web-secure.entrypoints: websecure
          traefik.http.routers.mkdi-web-secure.rule: "Host(`{{ web_domain }}`)"
          traefik.http.routers.mkdi-web-secure.tls.certresolver: cloudflare
          traefik.http.routers.mkdi-web-secure.tls.domains[0].main:
            "{{ domain }}"
          traefik.http.routers.mkdi-web-secure.tls.domains[0].sans:
            "*.{{ domain }}"

          traefik.http.services.mkdi-web-https.loadbalancer.server.port: "3000"
          traefik.http.routers.mkdi-web-secure.service: mkdi-web-https

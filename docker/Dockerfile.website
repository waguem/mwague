FROM node:20.13-alpine AS base
RUN npm i -g pnpm@9.1.1

FROM base AS deps

WORKDIR /app
COPY ./web/package.json ./web/pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

ARG WEB_DOMAIN
FROM base AS builder
WORKDIR /app
COPY ./web ./


ENV HOSTNAME=${WEB_DOMAIN}
# mount node_modules instead of copying them
RUN --mount=type=bind,from=deps,source=/app/node_modules,target=/app/node_modules,readwrite \
  #npx prisma generate && pnpm build
  pnpm build

FROM base AS runner
ARG WEB_DOMAIN
WORKDIR /app
ENV NODE_ENV production
ENV HOSTNAME=${WEB_DOMAIN}
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs --ingroup nodejs

COPY --from=builder /app/public ./public

# Copy over the prisma schema so we can to `npx prisma db push` and ensure the
# database exists on startup.
# COPY --chown=nextjs:nodejs ./web/prisma/ prisma/
# Copy over a startup script that'll run `npx prisma migrate deploy` before starting
# the webserver.  This ensures the webserver can actually check user accounts.
# This is a prisma variant of the postgres solution suggested in
#   https://docs.docker.com/compose/startup-order/
COPY --chown=nextjs:nodejs ./web/wait-for-postgres.sh ./

COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js ./next.config.js
COPY --from=deps    --chown=nextjs:nodejs /app/node_modules/sharp .
USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV NEXT_SHARP_PATH=/app/node_modules/sharp
# allow the heap to grow larger than the default
ENV NODE_OPTIONS "--max-old-space-size=4096"

CMD ["node", "server.js"]

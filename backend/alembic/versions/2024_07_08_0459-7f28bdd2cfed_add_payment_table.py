"""add payment table

Revision ID: 7f28bdd2cfed
Revises: ad0b6286ae66
Create Date: 2024-07-08 04:59:41.679933

"""

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "7f28bdd2cfed"
down_revision = "ad0b6286ae66"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "payments",
        sa.Column("notes", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("payment_date", sa.Date(), nullable=False),
        sa.Column("amount", sa.Numeric(), nullable=False),
        sa.Column("transaction_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column(
            "transaction_type",
            sa.Enum("DEPOSIT", "INTERNAL", "EXTERNAL", "SENDING", "FOREX", name="transactiontype"),
            nullable=False,
        ),
        sa.Column("state", sa.Enum("PAID", "CANCELLED", name="paymentstate"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    try:
        op.execute("ALTER TYPE transactiontype ADD VALUE 'SENDING'")
        op.execute("ALTER TYPE transactiontype ADD VALUE 'FOREX'")
        op.execute("ALTER TYPE transactiontype ADD VALUE 'EXTERNAL'")
    except Exception as e:
        print("transactiontype already has the values")
        print(e)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("payments")
    # ### end Alembic commands ###

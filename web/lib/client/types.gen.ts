// This file is auto-generated by @hey-api/openapi-ts

export type AccountResponse = {
  type: AccountType;
  currency: Currency;
  initials: string;
  balance: number;
  is_open: boolean;
  version: number;
  created_by?: string;
  office_id?: string;
};

/**
 * An enumeration.
 */
export type AccountType = "AGENT" | "SUPPLIER" | "OFFICE" | "FUND";

export type ActivityResponse = {
  started_at: string;
  state: ActivityState;
  openning_fund: number;
  closing_fund?: number;
  openning_rate?: {
    [key: string]: unknown;
  };
  closing_rate?: {
    [key: string]: unknown;
  };
};

/**
 * An enumeration.
 */
export type ActivityState = "OPEN" | "CLOSED" | "PAUSED";

export type AgentReponseWithAccounts = {
  name: string;
  initials: string;
  email: string;
  phone: string;
  country: string;
  type: AgentType;
  accounts?: Array<AccountResponse>;
};

export type AgentResponse = {
  name: string;
  initials: string;
  email: string;
  phone: string;
  country: string;
  type: AgentType;
};

/**
 * An enumeration.
 */
export type AgentType = "AGENT" | "SUPPLIER";

/**
 * Amount and rate of a transaction.
 */
export type Amount = {
  amount: number;
  rate: number;
};

export type Body_create_office_api_v1_organization_office_post = {
  create_office: CreateOfficeRequest;
};

export type Body_create_organization_api_v1_organization_post = {
  create_org: CreateOrganizationRequest;
};

export type CreateAccountRequest = {
  type: AccountType;
  currency: Currency;
  initials: string;
  balance?: number | null;
  owner_initials: string;
};

export type CreateActivityRequest = {
  rates: Array<Rate>;
};

export type CreateAgentRequest = {
  name: string;
  initials: string;
  email: string;
  phone: string;
  country: string;
  type: AgentType;
};

export type CreateEmployeeRequest = {
  email: string;
  username: string;
  office_id: string;
  roles: Array<string>;
  password: string;
};

export type CreateOfficeRequest = {
  country: string;
  initials: string;
  name: string;
  default_rates: Array<Rate>;
};

export type CreateOrganizationRequest = {
  initials: string;
  org_name: string;
};

/**
 * An enumeration.
 */
export type Currency = "USD" | "EUR" | "AED" | "CFA" | "GNF" | "RMB";

export type CustomerDetails = {
  name: string;
  phone: string;
};

/**
 * Transaction database model
 */
export type Deposit = {
  amount: number;
  rate: number;
  code: string;
  state: TransactionState;
  type: TransactionType;
  created_at?: string;
  id?: string;
  office_id: string;
  org_id: string;
  created_by: string;
  reviwed_by?: string;
  history?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  notes?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  owner_initials: string;
};

export type DepositRequest = {
  type: "DEPOSIT";
  receiver: string;
};

export type type = "DEPOSIT";

export type EmployeeResponse = {
  email: string;
  username: string;
  id: string;
  office_id: string;
  organization_id: string;
  roles: Array<string>;
};

export type EmployeeResponseComplete = {
  email: string;
  username: string;
  id: string;
  office_id: string;
  organization_id: string;
  roles: Array<string>;
  office: OfficeResponse;
};

/**
 * Transaction database model
 */
export type External = {
  amount: number;
  rate: number;
  code: string;
  state: TransactionState;
  type: TransactionType;
  created_at?: string;
  id?: string;
  office_id: string;
  org_id: string;
  created_by: string;
  reviwed_by?: string;
  history?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  notes?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  sender_initials: string;
  charges: number;
  customer?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
};

export type ExternalRequest = {
  type: "EXTERNAL";
  sender: string;
  customer?: CustomerDetails;
  payment_currency: Currency;
};

export type type2 = "EXTERNAL";

/**
 * Une transaction de change est effectu√©
 */
export type ForEx = {
  amount: number;
  rate: number;
  code: string;
  state: TransactionState;
  type: TransactionType;
  created_at?: string;
  id?: string;
  office_id: string;
  org_id: string;
  created_by: string;
  reviwed_by?: string;
  history?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  notes?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  bid_rate: number;
  offer_rate: number;
  method: PaymentMethod;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

/**
 * Transaction database model
 */
export type Internal = {
  amount: number;
  rate: number;
  code: string;
  state: TransactionState;
  type: TransactionType;
  created_at?: string;
  id?: string;
  office_id: string;
  org_id: string;
  created_by: string;
  reviwed_by?: string;
  history?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  notes?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  sender_initials: string;
  receiver_initials: string;
  charges: number;
};

/**
 * Internal transaction request.
 */
export type InternalRequest = {
  type: "INTERNAL";
  sender: string;
  receiver: string;
};

export type type3 = "INTERNAL";

export type Note = {
  content: string;
  created_by: string;
  created_at: string;
};

export type NoteList = {
  notes?: Array<Note>;
};

export type OfficeResponse = {
  country: string;
  initials: string;
  name: string;
  id: string;
  currencies?:
    | {
        [key: string]: unknown;
      }
    | Array<{
        [key: string]: unknown;
      }>;
};

export type OrganizationResponse = {
  initials: string;
  org_name: string;
  id: string;
};

/**
 * An enumeration.
 */
export type PaymentMethod = "CASH" | "BANK" | "MOBILE";

export type PaymentRequest = {
  amount: number;
  payment_type: TransactionType;
  notes?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
};

export type PaymentResponse = {
  payment_date: string;
  amount: number;
  transaction_id: string;
  transaction_type: TransactionType;
  state: PaymentState;
  notes?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
};

/**
 * An enumeration.
 */
export type PaymentState = 1 | 2;

export type Rate = {
  currency: string;
  rate: number;
};

/**
 * Transaction database model
 */
export type Sending = {
  amount: number;
  rate: number;
  code: string;
  state: TransactionState;
  type: TransactionType;
  created_at?: string;
  id?: string;
  office_id: string;
  org_id: string;
  created_by: string;
  reviwed_by?: string;
  history?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  notes?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  receiver_initials: string;
  bid_rate: number;
  offer_rate: number;
  method: PaymentMethod;
  payment_currency: Currency;
  charges: number;
  customer_sender?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
  customer_receiver?: {
    [key: string]:
      | {
          [key: string]: unknown;
        }
      | unknown;
  };
};

export type SendingRequest = {
  type: "SENDING";
  receiver_initials: string;
  customer_sender?: CustomerDetails;
  customer_receiver?: CustomerDetails;
  bid_rate: number;
  offer_rate: number;
  payment_method: PaymentMethod;
  payment_currency: Currency;
};

export type type4 = "SENDING";

export type TransactionRequest = {
  currency: Currency;
  amount: Amount;
  charges?: Amount;
  transaction_type?: TransactionType;
  data?: InternalRequest | DepositRequest | ExternalRequest | SendingRequest;
};

export type TransactionResponse = {
  amount: number;
  rate: number;
  code: string;
  state: TransactionState;
  type: TransactionType;
  created_at?: string;
  charges?: number;
  notes: NoteList;
};

export type TransactionReviewReq = {
  currency: Currency;
  amount: Amount;
  charges?: Amount;
  transaction_type?: TransactionType;
  data?: InternalRequest | DepositRequest | ExternalRequest | SendingRequest;
  code: string;
  type: TransactionType;
  state: ValidationState;
  notes?: string;
};

/**
 * An enumeration.
 */
export type TransactionState = "REVIEW" | "PENDING" | "PAID" | "CANCELLED" | "REJECTED";

/**
 * An enumeration.
 */
export type TransactionType = "DEPOSIT" | "INTERNAL" | "EXTERNAL" | "SENDING" | "FOREX";

/**
 * Update employee list request.
 */
export type UpdateEmployeeListRequest = {
  employees: Array<EmployeeResponse>;
};

export type UpdateOffice = {
  name?: string;
  country?: string;
  currencies?: Array<{
    [key: string]: unknown;
  }>;
  baseCurrency?: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

/**
 * An enumeration.
 */
export type ValidationState = "APPROVED" | "REJECTED" | "CANCELLED";

export type PingApiV1PingGetResponse = unknown;

export type GetOrganizationsApiV1OrganizationGetResponse = Array<OrganizationResponse>;

export type CreateOrganizationApiV1OrganizationPostData = {
  requestBody: Body_create_organization_api_v1_organization_post;
};

export type CreateOrganizationApiV1OrganizationPostResponse = OrganizationResponse;

export type GetMyOrganizationApiV1OrganizationMeGetResponse = OrganizationResponse;

export type GetOrgOfficesApiV1OrganizationOfficeGetResponse = Array<OfficeResponse>;

export type CreateOfficeApiV1OrganizationOfficePostData = {
  requestBody: Body_create_office_api_v1_organization_office_post;
};

export type CreateOfficeApiV1OrganizationOfficePostResponse = OfficeResponse;

export type GetOfficeApiV1OrganizationOfficeOfficeIdGetData = {
  officeId: string;
};

export type GetOfficeApiV1OrganizationOfficeOfficeIdGetResponse = OfficeResponse;

export type UpdateOfficeApiV1OrganizationOfficeOfficeIdPutData = {
  officeId: string;
  requestBody: UpdateOffice;
};

export type UpdateOfficeApiV1OrganizationOfficeOfficeIdPutResponse = OfficeResponse;

export type GetEmployeesApiV1OfficeEmployeeGetResponse = Array<EmployeeResponse>;

export type UpdateOfficeEmployeesApiV1OfficeEmployeePutData = {
  requestBody: UpdateEmployeeListRequest;
};

export type UpdateOfficeEmployeesApiV1OfficeEmployeePutResponse = Array<EmployeeResponse>;

export type CreateEmployeeApiV1OfficeEmployeePostData = {
  requestBody: CreateEmployeeRequest;
};

export type CreateEmployeeApiV1OfficeEmployeePostResponse = EmployeeResponse;

export type GetOfficeEmployeesApiV1OfficeOfficeIdEmployeeGetData = {
  officeId: string;
};

export type GetOfficeEmployeesApiV1OfficeOfficeIdEmployeeGetResponse = Array<EmployeeResponse>;

export type GetEmployeeApiV1OfficeEmployeeMeGetResponse = EmployeeResponseComplete;

export type UpdateEmployeeApiV1OfficeEmployeeEmployeeIdAssignPutData = {
  employeeId: string;
  requestBody: EmployeeResponse;
};

export type UpdateEmployeeApiV1OfficeEmployeeEmployeeIdAssignPutResponse = EmployeeResponse;

export type GetAgentsApiV1OfficeAgentGetResponse = Array<AgentReponseWithAccounts>;

export type CreateAgentApiV1OfficeAgentPostData = {
  requestBody: CreateAgentRequest;
};

export type CreateAgentApiV1OfficeAgentPostResponse = AgentResponse;

export type GetOfficeAgentsApiV1OfficeOfficeIdAgentGetData = {
  officeId: string;
};

export type GetOfficeAgentsApiV1OfficeOfficeIdAgentGetResponse = unknown;

export type GetAgentApiV1OfficeAgentAgentInitialsGetData = {
  agentInitials: string;
};

export type GetAgentApiV1OfficeAgentAgentInitialsGetResponse = AgentResponse;

export type OpenAccountApiV1AccountPostData = {
  requestBody: CreateAccountRequest;
};

export type OpenAccountApiV1AccountPostResponse = AccountResponse;

export type GetOfficeAccountsApiV1OfficeOfficeIdAccountGetData = {
  officeId: string;
};

export type GetOfficeAccountsApiV1OfficeOfficeIdAccountGetResponse = Array<AccountResponse>;

export type GetAgentAccountsApiV1AgentAgentInitialAccountGetData = {
  agentInitial: string;
};

export type GetAgentAccountsApiV1AgentAgentInitialAccountGetResponse = Array<AccountResponse>;

export type GetActivityApiV1OfficeActivityGetResponse = ActivityResponse;

export type StartActivityApiV1OfficeActivityPostData = {
  requestBody: CreateActivityRequest;
};

export type StartActivityApiV1OfficeActivityPostResponse = ActivityResponse;

export type GetOfficeTransactionsApiV1OfficeTransactionsGetResponse = Array<TransactionResponse>;

export type GetAgentTransactionsApiV1AgentInitialsTransactionsGetData = {
  initials: string;
};

export type GetAgentTransactionsApiV1AgentInitialsTransactionsGetResponse = Array<TransactionResponse>;

export type RequestTransactionApiV1TransactionPostData = {
  requestBody: TransactionRequest;
};

export type RequestTransactionApiV1TransactionPostResponse = TransactionResponse;

export type ReviewTransactionApiV1TransactionTransactionCodeReviewPostData = {
  requestBody: TransactionReviewReq;
  transactionCode: string;
};

export type ReviewTransactionApiV1TransactionTransactionCodeReviewPostResponse = TransactionResponse;

export type GetOfficeTransactionsWithDetailsApiV1TransactionCodeGetData = {
  code: string;
  trType: TransactionType;
};

export type GetOfficeTransactionsWithDetailsApiV1TransactionCodeGetResponse =
  | Internal
  | Deposit
  | Sending
  | ForEx
  | External;

export type UpdateTransactionApiV1TransactionCodePutData = {
  code: string;
  requestBody: TransactionRequest;
};

export type UpdateTransactionApiV1TransactionCodePutResponse = TransactionResponse;

export type AddPaymentApiV1TransactionCodePayPostData = {
  code: string;
  requestBody: PaymentRequest;
};

export type AddPaymentApiV1TransactionCodePayPostResponse = PaymentResponse;

export type $OpenApiTs = {
  "/api/v1/ping": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  "/api/v1/organization": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<OrganizationResponse>;
      };
    };
    post: {
      req: CreateOrganizationApiV1OrganizationPostData;
      res: {
        /**
         * Successful Response
         */
        201: OrganizationResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/organization/me": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: OrganizationResponse;
      };
    };
  };
  "/api/v1/organization/office": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<OfficeResponse>;
      };
    };
    post: {
      req: CreateOfficeApiV1OrganizationOfficePostData;
      res: {
        /**
         * Successful Response
         */
        201: OfficeResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/organization/office/{office_id}": {
    get: {
      req: GetOfficeApiV1OrganizationOfficeOfficeIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: OfficeResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateOfficeApiV1OrganizationOfficeOfficeIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: OfficeResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/office/employee": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<EmployeeResponse>;
      };
    };
    put: {
      req: UpdateOfficeEmployeesApiV1OfficeEmployeePutData;
      res: {
        /**
         * Successful Response
         */
        200: Array<EmployeeResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateEmployeeApiV1OfficeEmployeePostData;
      res: {
        /**
         * Successful Response
         */
        201: EmployeeResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/office/{office_id}/employee": {
    get: {
      req: GetOfficeEmployeesApiV1OfficeOfficeIdEmployeeGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<EmployeeResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/office/employee/me": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: EmployeeResponseComplete;
      };
    };
  };
  "/api/v1/office/employee/{employee_id}/assign": {
    put: {
      req: UpdateEmployeeApiV1OfficeEmployeeEmployeeIdAssignPutData;
      res: {
        /**
         * Successful Response
         */
        200: EmployeeResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/office/agent": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentReponseWithAccounts>;
      };
    };
    post: {
      req: CreateAgentApiV1OfficeAgentPostData;
      res: {
        /**
         * Successful Response
         */
        201: AgentResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/office/{office_id}/agent": {
    get: {
      req: GetOfficeAgentsApiV1OfficeOfficeIdAgentGetData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/office/agent/{agent_initials}": {
    get: {
      req: GetAgentApiV1OfficeAgentAgentInitialsGetData;
      res: {
        /**
         * Successful Response
         */
        200: AgentResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/account": {
    post: {
      req: OpenAccountApiV1AccountPostData;
      res: {
        /**
         * Successful Response
         */
        201: AccountResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/office/{office_id}account": {
    get: {
      req: GetOfficeAccountsApiV1OfficeOfficeIdAccountGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<AccountResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/agent/{agent_initial}/account": {
    get: {
      req: GetAgentAccountsApiV1AgentAgentInitialAccountGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<AccountResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/office/activity": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: ActivityResponse;
      };
    };
    post: {
      req: StartActivityApiV1OfficeActivityPostData;
      res: {
        /**
         * Successful Response
         */
        200: ActivityResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/office/transactions": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<TransactionResponse>;
      };
    };
  };
  "/api/v1/agent/{initials}/transactions": {
    get: {
      req: GetAgentTransactionsApiV1AgentInitialsTransactionsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<TransactionResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/transaction": {
    post: {
      req: RequestTransactionApiV1TransactionPostData;
      res: {
        /**
         * Successful Response
         */
        201: TransactionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/transaction/{transaction_code}/review": {
    post: {
      req: ReviewTransactionApiV1TransactionTransactionCodeReviewPostData;
      res: {
        /**
         * Successful Response
         */
        200: TransactionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/transaction/{code}": {
    get: {
      req: GetOfficeTransactionsWithDetailsApiV1TransactionCodeGetData;
      res: {
        /**
         * Successful Response
         */
        200: Internal | Deposit | Sending | ForEx | External;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateTransactionApiV1TransactionCodePutData;
      res: {
        /**
         * Successful Response
         */
        200: TransactionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/api/v1/transaction/{code}/pay": {
    post: {
      req: AddPaymentApiV1TransactionCodePayPostData;
      res: {
        /**
         * Successful Response
         */
        200: PaymentResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
};

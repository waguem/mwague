// This file is auto-generated by @hey-api/openapi-ts

export const $AccountResponse = {
  properties: {
    type: {
      $ref: "#/components/schemas/AccountType",
    },
    currency: {
      $ref: "#/components/schemas/Currency",
    },
    initials: {
      type: "string",
      maxLength: 4,
      title: "Initials",
    },
    balance: {
      type: "number",
      title: "Balance",
    },
    is_open: {
      type: "boolean",
      title: "Is Open",
    },
    version: {
      type: "integer",
      title: "Version",
    },
    created_by: {
      type: "string",
      format: "uuid",
      title: "Created By",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
  },
  type: "object",
  required: ["type", "currency", "initials", "balance", "is_open", "version"],
  title: "AccountResponse",
} as const;

export const $AccountType = {
  enum: ["AGENT", "SUPPLIER", "OFFICE", "FUND"],
  title: "AccountType",
  description: "An enumeration.",
} as const;

export const $ActivityResponse = {
  properties: {
    started_at: {
      type: "string",
      format: "date",
      title: "Started At",
    },
    state: {
      $ref: "#/components/schemas/ActivityState",
    },
    openning_fund: {
      type: "number",
      title: "Openning Fund",
    },
    closing_fund: {
      type: "number",
      title: "Closing Fund",
    },
    openning_rate: {
      type: "object",
      title: "Openning Rate",
    },
    closing_rate: {
      type: "object",
      title: "Closing Rate",
    },
  },
  type: "object",
  required: ["started_at", "state", "openning_fund"],
  title: "ActivityResponse",
} as const;

export const $ActivityState = {
  enum: ["OPEN", "CLOSED", "PAUSED"],
  title: "ActivityState",
  description: "An enumeration.",
} as const;

export const $AgentReponseWithAccounts = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    initials: {
      type: "string",
      maxLength: 4,
      title: "Initials",
      unique: true,
      nullable: false,
    },
    phone: {
      type: "string",
      maxLength: 16,
      title: "Phone",
      nullable: false,
    },
    country: {
      type: "string",
      maxLength: 64,
      title: "Country",
      nullable: false,
    },
    type: {
      $ref: "#/components/schemas/AgentType",
    },
    accounts: {
      items: {
        $ref: "#/components/schemas/AccountResponse",
      },
      type: "array",
      title: "Accounts",
      default: [],
    },
  },
  type: "object",
  required: ["name", "initials", "phone", "country", "type"],
  title: "AgentReponseWithAccounts",
} as const;

export const $AgentResponse = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    initials: {
      type: "string",
      maxLength: 4,
      title: "Initials",
      unique: true,
      nullable: false,
    },
    phone: {
      type: "string",
      maxLength: 16,
      title: "Phone",
      nullable: false,
    },
    country: {
      type: "string",
      maxLength: 64,
      title: "Country",
      nullable: false,
    },
    type: {
      $ref: "#/components/schemas/AgentType",
    },
  },
  type: "object",
  required: ["name", "initials", "phone", "country", "type"],
  title: "AgentResponse",
} as const;

export const $AgentType = {
  enum: ["AGENT", "SUPPLIER"],
  title: "AgentType",
  description: "An enumeration.",
} as const;

export const $Amount = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      minimum: 0,
      title: "Rate",
      strict: true,
    },
  },
  type: "object",
  required: ["amount", "rate"],
  title: "Amount",
  description: "Amount and rate of a transaction.",
} as const;

export const $Body_create_office_api_v1_organization_office_post = {
  properties: {
    create_office: {
      $ref: "#/components/schemas/CreateOfficeRequest",
    },
  },
  type: "object",
  required: ["create_office"],
  title: "Body_create_office_api_v1_organization_office_post",
} as const;

export const $Body_create_organization_api_v1_organization_post = {
  properties: {
    create_org: {
      $ref: "#/components/schemas/CreateOrganizationRequest",
    },
  },
  type: "object",
  required: ["create_org"],
  title: "Body_create_organization_api_v1_organization_post",
} as const;

export const $BuyRequest = {
  properties: {
    request_type: {
      type: "string",
      enum: ["BUY"],
      title: "Request Type",
    },
    provider: {
      type: "string",
      title: "Provider",
    },
  },
  type: "object",
  required: ["request_type", "provider"],
  title: "BuyRequest",
} as const;

export const $CreateAccountRequest = {
  properties: {
    type: {
      $ref: "#/components/schemas/AccountType",
    },
    currency: {
      $ref: "#/components/schemas/Currency",
    },
    initials: {
      type: "string",
      maxLength: 4,
      title: "Initials",
    },
    balance: {
      type: "number",
      title: "Balance",
      default: 0,
      nullable: true,
    },
    owner_initials: {
      type: "string",
      title: "Owner Initials",
    },
  },
  type: "object",
  required: ["type", "currency", "initials", "owner_initials"],
  title: "CreateAccountRequest",
} as const;

export const $CreateActivityRequest = {
  properties: {
    rates: {
      items: {
        $ref: "#/components/schemas/Rate",
      },
      type: "array",
      title: "Rates",
    },
  },
  type: "object",
  required: ["rates"],
  title: "CreateActivityRequest",
} as const;

export const $CreateAgentRequest = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    initials: {
      type: "string",
      maxLength: 4,
      title: "Initials",
      unique: true,
      nullable: false,
    },
    phone: {
      type: "string",
      maxLength: 16,
      title: "Phone",
      nullable: false,
    },
    country: {
      type: "string",
      maxLength: 64,
      title: "Country",
      nullable: false,
    },
    type: {
      $ref: "#/components/schemas/AgentType",
    },
  },
  type: "object",
  required: ["name", "initials", "phone", "country", "type"],
  title: "CreateAgentRequest",
} as const;

export const $CreateEmployeeRequest = {
  properties: {
    email: {
      type: "string",
      maxLength: 128,
      title: "Email",
    },
    username: {
      type: "string",
      maxLength: 128,
      title: "Username",
    },
    office_id: {
      type: "string",
      title: "Office Id",
    },
    roles: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Roles",
    },
    password: {
      type: "string",
      title: "Password",
    },
  },
  type: "object",
  required: ["email", "username", "office_id", "roles", "password"],
  title: "CreateEmployeeRequest",
} as const;

export const $CreateOfficeRequest = {
  properties: {
    country: {
      type: "string",
      maxLength: 64,
      title: "Country",
      nullable: false,
    },
    initials: {
      type: "string",
      maxLength: 8,
      title: "Initials",
      unique: true,
      nullable: false,
    },
    name: {
      type: "string",
      maxLength: 64,
      title: "Name",
      nullable: false,
    },
    default_rates: {
      items: {
        $ref: "#/components/schemas/Rate",
      },
      type: "array",
      title: "Default Rates",
    },
  },
  type: "object",
  required: ["country", "initials", "name", "default_rates"],
  title: "CreateOfficeRequest",
} as const;

export const $CreateOfficeWalletRequest = {
  properties: {
    crypto_currency: {
      $ref: "#/components/schemas/CryptoCurrency",
    },
    trading_currency: {
      $ref: "#/components/schemas/Currency",
    },
  },
  type: "object",
  required: ["crypto_currency", "trading_currency"],
  title: "CreateOfficeWalletRequest",
} as const;

export const $CreateOrganizationRequest = {
  properties: {
    initials: {
      type: "string",
      maxLength: 8,
      title: "Initials",
      unique: true,
      nullable: false,
    },
    org_name: {
      type: "string",
      maxLength: 64,
      title: "Org Name",
      nullable: false,
    },
  },
  type: "object",
  required: ["initials", "org_name"],
  title: "CreateOrganizationRequest",
} as const;

export const $CryptoCurrency = {
  enum: ["BTC", "ETH", "USDT"],
  title: "CryptoCurrency",
  description: "An enumeration.",
} as const;

export const $Currency = {
  enum: ["USD", "EUR", "AED", "CFA", "GNF", "RMB"],
  title: "Currency",
  description: "An enumeration.",
} as const;

export const $CustomerDetails = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    phone: {
      type: "string",
      title: "Phone",
    },
  },
  type: "object",
  required: ["name", "phone"],
  title: "CustomerDetails",
} as const;

export const $Deposit = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Rate",
      strict: true,
    },
    code: {
      type: "string",
      maxLength: 64,
      title: "Code",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
    org_id: {
      type: "string",
      format: "uuid",
      title: "Org Id",
    },
    created_by: {
      type: "string",
      format: "uuid",
      title: "Created By",
    },
    reviwed_by: {
      type: "string",
      format: "uuid",
      title: "Reviwed By",
    },
    history: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "History",
      default: {},
    },
    notes: {
      type: "string",
      title: "Notes",
      default: "[]",
      nullable: false,
    },
    owner_initials: {
      type: "string",
      title: "Owner Initials",
    },
  },
  type: "object",
  required: ["amount", "rate", "code", "state", "type", "office_id", "org_id", "created_by", "owner_initials"],
  title: "Deposit",
  description: "Transaction database model",
} as const;

export const $DepositRequest = {
  properties: {
    type: {
      type: "string",
      enum: ["DEPOSIT"],
      title: "Type",
    },
    receiver: {
      type: "string",
      title: "Receiver",
    },
  },
  type: "object",
  required: ["type", "receiver"],
  title: "DepositRequest",
} as const;

export const $EmployeeResponse = {
  properties: {
    email: {
      type: "string",
      maxLength: 128,
      title: "Email",
    },
    username: {
      type: "string",
      maxLength: 128,
      title: "Username",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
    organization_id: {
      type: "string",
      format: "uuid",
      title: "Organization Id",
    },
    roles: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Roles",
    },
    avatar_url: {
      type: "string",
      title: "Avatar Url",
    },
  },
  type: "object",
  required: ["email", "username", "id", "office_id", "organization_id", "roles"],
  title: "EmployeeResponse",
} as const;

export const $EmployeeResponseComplete = {
  properties: {
    email: {
      type: "string",
      maxLength: 128,
      title: "Email",
    },
    username: {
      type: "string",
      maxLength: 128,
      title: "Username",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
    organization_id: {
      type: "string",
      format: "uuid",
      title: "Organization Id",
    },
    roles: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Roles",
    },
    avatar_url: {
      type: "string",
      title: "Avatar Url",
    },
    office: {
      $ref: "#/components/schemas/OfficeResponse",
    },
  },
  type: "object",
  required: ["email", "username", "id", "office_id", "organization_id", "roles", "office"],
  title: "EmployeeResponseComplete",
} as const;

export const $ExchangeRequest = {
  properties: {
    request_type: {
      type: "string",
      enum: ["EXCHANGE"],
      title: "Request Type",
    },
    exchange_rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Exchange Rate",
      strict: true,
    },
    walletID: {
      type: "string",
      title: "Walletid",
    },
  },
  type: "object",
  required: ["request_type", "exchange_rate", "walletID"],
  title: "ExchangeRequest",
} as const;

export const $External = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Rate",
      strict: true,
    },
    code: {
      type: "string",
      maxLength: 64,
      title: "Code",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
    org_id: {
      type: "string",
      format: "uuid",
      title: "Org Id",
    },
    created_by: {
      type: "string",
      format: "uuid",
      title: "Created By",
    },
    reviwed_by: {
      type: "string",
      format: "uuid",
      title: "Reviwed By",
    },
    history: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "History",
      default: {},
    },
    notes: {
      type: "string",
      title: "Notes",
      default: "[]",
      nullable: false,
    },
    sender_initials: {
      type: "string",
      title: "Sender Initials",
    },
    charges: {
      type: "number",
      minimum: 0,
      title: "Charges",
    },
    customer: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "Customer",
      default: {},
    },
  },
  type: "object",
  required: [
    "amount",
    "rate",
    "code",
    "state",
    "type",
    "office_id",
    "org_id",
    "created_by",
    "sender_initials",
    "charges",
  ],
  title: "External",
  description: "Transaction database model",
} as const;

export const $ExternalRequest = {
  properties: {
    type: {
      type: "string",
      enum: ["EXTERNAL"],
      title: "Type",
    },
    sender: {
      type: "string",
      title: "Sender",
    },
    customer: {
      $ref: "#/components/schemas/CustomerDetails",
    },
    payment_currency: {
      $ref: "#/components/schemas/Currency",
    },
  },
  type: "object",
  required: ["type", "sender", "payment_currency"],
  title: "ExternalRequest",
} as const;

export const $ExternalWithPayments = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Rate",
      strict: true,
    },
    code: {
      type: "string",
      maxLength: 64,
      title: "Code",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
    org_id: {
      type: "string",
      format: "uuid",
      title: "Org Id",
    },
    created_by: {
      type: "string",
      format: "uuid",
      title: "Created By",
    },
    reviwed_by: {
      type: "string",
      format: "uuid",
      title: "Reviwed By",
    },
    history: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "History",
      default: {},
    },
    notes: {
      type: "string",
      title: "Notes",
      default: "[]",
      nullable: false,
    },
    sender_initials: {
      type: "string",
      title: "Sender Initials",
    },
    charges: {
      type: "number",
      minimum: 0,
      title: "Charges",
    },
    customer: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "Customer",
      default: {},
    },
    payments: {
      items: {
        $ref: "#/components/schemas/Payment",
      },
      type: "array",
      title: "Payments",
      default: [],
    },
  },
  type: "object",
  required: [
    "amount",
    "rate",
    "code",
    "state",
    "type",
    "office_id",
    "org_id",
    "created_by",
    "sender_initials",
    "charges",
  ],
  title: "ExternalWithPayments",
  description: "Transaction database model",
} as const;

export const $ForEx = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Rate",
      strict: true,
    },
    code: {
      type: "string",
      maxLength: 64,
      title: "Code",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
    org_id: {
      type: "string",
      format: "uuid",
      title: "Org Id",
    },
    created_by: {
      type: "string",
      format: "uuid",
      title: "Created By",
    },
    reviwed_by: {
      type: "string",
      format: "uuid",
      title: "Reviwed By",
    },
    history: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "History",
      default: {},
    },
    notes: {
      type: "string",
      title: "Notes",
      default: "[]",
      nullable: false,
    },
    currency: {
      $ref: "#/components/schemas/Currency",
    },
    base_currency: {
      $ref: "#/components/schemas/Currency",
    },
    buying_rate: {
      type: "number",
      minimum: 0,
      title: "Buying Rate",
    },
    selling_rate: {
      type: "number",
      minimum: 0,
      title: "Selling Rate",
    },
    provider_account: {
      type: "string",
      title: "Provider Account",
    },
    customer_account: {
      type: "string",
      title: "Customer Account",
    },
    charge_percentage: {
      type: "number",
      maximum: 100,
      minimum: 0,
      title: "Charge Percentage",
    },
  },
  type: "object",
  required: [
    "amount",
    "rate",
    "code",
    "state",
    "type",
    "office_id",
    "org_id",
    "created_by",
    "currency",
    "base_currency",
    "buying_rate",
    "selling_rate",
    "provider_account",
    "customer_account",
    "charge_percentage",
  ],
  title: "ForEx",
  description: "Une transaction de change est effectué",
} as const;

export const $ForExRequest = {
  properties: {
    type: {
      type: "string",
      enum: ["FOREX"],
      title: "Type",
    },
    provider_account: {
      type: "string",
      title: "Provider Account",
    },
    customer_account: {
      type: "string",
      title: "Customer Account",
    },
    currency: {
      $ref: "#/components/schemas/Currency",
    },
    base_currency: {
      $ref: "#/components/schemas/Currency",
    },
    daily_rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Daily Rate",
      strict: true,
    },
    buying_rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Buying Rate",
      strict: true,
    },
    selling_rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Selling Rate",
      strict: true,
    },
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
  },
  type: "object",
  required: [
    "type",
    "provider_account",
    "customer_account",
    "currency",
    "base_currency",
    "daily_rate",
    "buying_rate",
    "selling_rate",
    "amount",
  ],
  title: "ForExRequest",
} as const;

export const $ForExWithPayments = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Rate",
      strict: true,
    },
    code: {
      type: "string",
      maxLength: 64,
      title: "Code",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
    org_id: {
      type: "string",
      format: "uuid",
      title: "Org Id",
    },
    created_by: {
      type: "string",
      format: "uuid",
      title: "Created By",
    },
    reviwed_by: {
      type: "string",
      format: "uuid",
      title: "Reviwed By",
    },
    history: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "History",
      default: {},
    },
    notes: {
      type: "string",
      title: "Notes",
      default: "[]",
      nullable: false,
    },
    currency: {
      $ref: "#/components/schemas/Currency",
    },
    base_currency: {
      $ref: "#/components/schemas/Currency",
    },
    buying_rate: {
      type: "number",
      minimum: 0,
      title: "Buying Rate",
    },
    selling_rate: {
      type: "number",
      minimum: 0,
      title: "Selling Rate",
    },
    provider_account: {
      type: "string",
      title: "Provider Account",
    },
    customer_account: {
      type: "string",
      title: "Customer Account",
    },
    charge_percentage: {
      type: "number",
      maximum: 100,
      minimum: 0,
      title: "Charge Percentage",
    },
    payments: {
      items: {
        $ref: "#/components/schemas/Payment",
      },
      type: "array",
      title: "Payments",
      default: [],
    },
  },
  type: "object",
  required: [
    "amount",
    "rate",
    "code",
    "state",
    "type",
    "office_id",
    "org_id",
    "created_by",
    "currency",
    "base_currency",
    "buying_rate",
    "selling_rate",
    "provider_account",
    "customer_account",
    "charge_percentage",
  ],
  title: "ForExWithPayments",
  description: "Une transaction de change est effectué",
} as const;

export const $FundCommit = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    is_out: {
      type: "boolean",
      title: "Is Out",
    },
    v_from: {
      type: "number",
      title: "V From",
    },
    variation: {
      type: "number",
      title: "Variation",
    },
    date: {
      type: "string",
      format: "date-time",
      title: "Date",
    },
    description: {
      type: "string",
      maxLength: 128,
      title: "Description",
    },
    activity_id: {
      type: "string",
      format: "uuid",
      title: "Activity Id",
    },
  },
  type: "object",
  required: ["is_out", "v_from", "variation", "description", "activity_id"],
  title: "FundCommit",
} as const;

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: "#/components/schemas/ValidationError",
      },
      type: "array",
      title: "Detail",
    },
  },
  type: "object",
  title: "HTTPValidationError",
} as const;

export const $Internal = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Rate",
      strict: true,
    },
    code: {
      type: "string",
      maxLength: 64,
      title: "Code",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
    org_id: {
      type: "string",
      format: "uuid",
      title: "Org Id",
    },
    created_by: {
      type: "string",
      format: "uuid",
      title: "Created By",
    },
    reviwed_by: {
      type: "string",
      format: "uuid",
      title: "Reviwed By",
    },
    history: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "History",
      default: {},
    },
    notes: {
      type: "string",
      title: "Notes",
      default: "[]",
      nullable: false,
    },
    sender_initials: {
      type: "string",
      title: "Sender Initials",
    },
    receiver_initials: {
      type: "string",
      title: "Receiver Initials",
    },
    charges: {
      type: "number",
      minimum: 0,
      title: "Charges",
    },
  },
  type: "object",
  required: [
    "amount",
    "rate",
    "code",
    "state",
    "type",
    "office_id",
    "org_id",
    "created_by",
    "sender_initials",
    "receiver_initials",
    "charges",
  ],
  title: "Internal",
  description: "Transaction database model",
} as const;

export const $InternalRequest = {
  properties: {
    type: {
      type: "string",
      enum: ["INTERNAL"],
      title: "Type",
    },
    sender: {
      type: "string",
      title: "Sender",
    },
    receiver: {
      type: "string",
      title: "Receiver",
    },
  },
  type: "object",
  required: ["type", "sender", "receiver"],
  title: "InternalRequest",
  description: "Internal transaction request.",
} as const;

export const $Note = {
  properties: {
    date: {
      type: "string",
      title: "Date",
    },
    message: {
      type: "string",
      title: "Message",
    },
    type: {
      type: "string",
      title: "Type",
    },
    user: {
      type: "string",
      title: "User",
    },
  },
  type: "object",
  required: ["date", "message", "type"],
  title: "Note",
} as const;

export const $OfficeHealth = {
  properties: {
    status: {
      anyOf: [
        {
          type: "string",
          enum: ["healthy"],
        },
        {
          type: "string",
          enum: ["unhealthy"],
        },
      ],
      title: "Status",
    },
    invariant: {
      type: "number",
      title: "Invariant",
    },
    accounts: {
      items: {
        $ref: "#/components/schemas/AccountResponse",
      },
      type: "array",
      title: "Accounts",
    },
  },
  type: "object",
  required: ["status", "invariant", "accounts"],
  title: "OfficeHealth",
  description: "Offic health response.",
} as const;

export const $OfficeResponse = {
  properties: {
    country: {
      type: "string",
      maxLength: 64,
      title: "Country",
      nullable: false,
    },
    initials: {
      type: "string",
      maxLength: 8,
      title: "Initials",
      unique: true,
      nullable: false,
    },
    name: {
      type: "string",
      maxLength: 64,
      title: "Name",
      nullable: false,
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    currencies: {
      anyOf: [
        {
          type: "object",
        },
        {
          items: {
            type: "object",
          },
          type: "array",
        },
      ],
      title: "Currencies",
    },
    wallets: {
      items: {
        $ref: "#/components/schemas/OfficeWalletResponse",
      },
      type: "array",
      title: "Wallets",
    },
  },
  type: "object",
  required: ["country", "initials", "name", "id"],
  title: "OfficeResponse",
} as const;

export const $OfficeResult = {
  properties: {
    result_source: {
      $ref: "#/components/schemas/TransactionType",
    },
    amount: {
      type: "number",
      title: "Amount",
    },
    code: {
      type: "string",
      title: "Code",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    result_type: {
      $ref: "#/components/schemas/ResultType",
    },
    date: {
      type: "string",
      format: "date",
      title: "Date",
    },
    transaction_id: {
      type: "string",
      format: "uuid",
      title: "Transaction Id",
    },
  },
  type: "object",
  required: ["result_source", "amount", "code", "state", "result_type", "date", "transaction_id"],
  title: "OfficeResult",
  description: "Office result.",
} as const;

export const $OfficeWalletResponse = {
  properties: {
    crypto_currency: {
      $ref: "#/components/schemas/CryptoCurrency",
    },
    trading_currency: {
      $ref: "#/components/schemas/Currency",
    },
    walletID: {
      type: "string",
      title: "Walletid",
    },
    crypto_balance: {
      type: "number",
      title: "Crypto Balance",
    },
    trading_balance: {
      type: "number",
      title: "Trading Balance",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
  },
  type: "object",
  required: ["crypto_currency", "trading_currency", "walletID", "crypto_balance", "trading_balance", "office_id"],
  title: "OfficeWalletResponse",
} as const;

export const $OrganizationResponse = {
  properties: {
    initials: {
      type: "string",
      maxLength: 8,
      title: "Initials",
      unique: true,
      nullable: false,
    },
    org_name: {
      type: "string",
      maxLength: 64,
      title: "Org Name",
      nullable: false,
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
  },
  type: "object",
  required: ["initials", "org_name", "id"],
  title: "OrganizationResponse",
} as const;

export const $Payment = {
  properties: {
    payment_date: {
      type: "string",
      format: "date",
      title: "Payment Date",
    },
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    transaction_id: {
      type: "string",
      format: "uuid",
      title: "Transaction Id",
    },
    transaction_type: {
      $ref: "#/components/schemas/TransactionType",
    },
    state: {
      $ref: "#/components/schemas/PaymentState",
    },
    notes: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "Notes",
      default: {},
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    paid_by: {
      type: "string",
      format: "uuid",
      title: "Paid By",
    },
  },
  type: "object",
  required: ["payment_date", "amount", "transaction_id", "transaction_type", "state", "paid_by"],
  title: "Payment",
} as const;

export const $PaymentMethod = {
  enum: ["CASH", "BANK", "MOBILE"],
  title: "PaymentMethod",
  description: "An enumeration.",
} as const;

export const $PaymentRequest = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      minimum: 0,
      title: "Rate",
      strict: true,
    },
    payment_type: {
      $ref: "#/components/schemas/TransactionType",
    },
    customer: {
      $ref: "#/components/schemas/CustomerDetails",
    },
    notes: {
      type: "string",
      title: "Notes",
    },
  },
  type: "object",
  required: ["amount", "rate", "payment_type"],
  title: "PaymentRequest",
} as const;

export const $PaymentResponse = {
  properties: {
    payment_date: {
      type: "string",
      format: "date",
      title: "Payment Date",
    },
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    transaction_id: {
      type: "string",
      format: "uuid",
      title: "Transaction Id",
    },
    transaction_type: {
      $ref: "#/components/schemas/TransactionType",
    },
    state: {
      $ref: "#/components/schemas/PaymentState",
    },
    notes: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "Notes",
      default: {},
    },
    paid_by: {
      type: "string",
      format: "uuid",
      title: "Paid By",
    },
  },
  type: "object",
  required: ["payment_date", "amount", "transaction_id", "transaction_type", "state"],
  title: "PaymentResponse",
} as const;

export const $PaymentState = {
  enum: [1, 2],
  title: "PaymentState",
  description: "An enumeration.",
} as const;

export const $Rate = {
  properties: {
    currency: {
      type: "string",
      title: "Currency",
    },
    rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Rate",
      strict: true,
    },
  },
  type: "object",
  required: ["currency", "rate"],
  title: "Rate",
} as const;

export const $ReportResponse = {
  properties: {
    results: {
      items: {
        $ref: "#/components/schemas/OfficeResult",
      },
      type: "array",
      title: "Results",
    },
  },
  type: "object",
  required: ["results"],
  title: "ReportResponse",
  description: "Monthly report response.",
} as const;

export const $ResultType = {
  enum: ["CHARGE", "BENEFIT", "LOSS", "EXPENSE"],
  title: "ResultType",
  description: "Result type.",
} as const;

export const $SellRequest = {
  properties: {
    request_type: {
      type: "string",
      enum: ["SELL"],
      title: "Request Type",
    },
    customer: {
      type: "string",
      title: "Customer",
    },
    currency: {
      $ref: "#/components/schemas/Currency",
    },
  },
  type: "object",
  required: ["request_type", "customer", "currency"],
  title: "SellRequest",
} as const;

export const $Sending = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Rate",
      strict: true,
    },
    code: {
      type: "string",
      maxLength: 64,
      title: "Code",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
    org_id: {
      type: "string",
      format: "uuid",
      title: "Org Id",
    },
    created_by: {
      type: "string",
      format: "uuid",
      title: "Created By",
    },
    reviwed_by: {
      type: "string",
      format: "uuid",
      title: "Reviwed By",
    },
    history: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "History",
      default: {},
    },
    notes: {
      type: "string",
      title: "Notes",
      default: "[]",
      nullable: false,
    },
    receiver_initials: {
      type: "string",
      title: "Receiver Initials",
    },
    method: {
      $ref: "#/components/schemas/PaymentMethod",
    },
    payment_currency: {
      $ref: "#/components/schemas/Currency",
    },
    charges: {
      type: "number",
      minimum: 0,
      title: "Charges",
    },
  },
  type: "object",
  required: [
    "amount",
    "rate",
    "code",
    "state",
    "type",
    "office_id",
    "org_id",
    "created_by",
    "receiver_initials",
    "method",
    "payment_currency",
    "charges",
  ],
  title: "Sending",
  description: "Transaction database model",
} as const;

export const $SendingRequest = {
  properties: {
    type: {
      type: "string",
      enum: ["SENDING"],
      title: "Type",
    },
    receiver_initials: {
      type: "string",
      title: "Receiver Initials",
    },
    payment_method: {
      $ref: "#/components/schemas/PaymentMethod",
    },
    payment_currency: {
      $ref: "#/components/schemas/Currency",
    },
  },
  type: "object",
  required: ["type", "receiver_initials", "payment_method", "payment_currency"],
  title: "SendingRequest",
} as const;

export const $SendingWithPayments = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Rate",
      strict: true,
    },
    code: {
      type: "string",
      maxLength: 64,
      title: "Code",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    office_id: {
      type: "string",
      format: "uuid",
      title: "Office Id",
    },
    org_id: {
      type: "string",
      format: "uuid",
      title: "Org Id",
    },
    created_by: {
      type: "string",
      format: "uuid",
      title: "Created By",
    },
    reviwed_by: {
      type: "string",
      format: "uuid",
      title: "Reviwed By",
    },
    history: {
      additionalProperties: {
        anyOf: [
          {
            type: "object",
          },
          {},
        ],
      },
      type: "object",
      title: "History",
      default: {},
    },
    notes: {
      type: "string",
      title: "Notes",
      default: "[]",
      nullable: false,
    },
    receiver_initials: {
      type: "string",
      title: "Receiver Initials",
    },
    method: {
      $ref: "#/components/schemas/PaymentMethod",
    },
    payment_currency: {
      $ref: "#/components/schemas/Currency",
    },
    charges: {
      type: "number",
      minimum: 0,
      title: "Charges",
    },
    payments: {
      items: {
        $ref: "#/components/schemas/Payment",
      },
      type: "array",
      title: "Payments",
      default: [],
    },
  },
  type: "object",
  required: [
    "amount",
    "rate",
    "code",
    "state",
    "type",
    "office_id",
    "org_id",
    "created_by",
    "receiver_initials",
    "method",
    "payment_currency",
    "charges",
  ],
  title: "SendingWithPayments",
  description: "Transaction database model",
} as const;

export const $TradingType = {
  enum: ["BUY", "SELL", "EXCHANGE"],
  title: "TradingType",
  description: "An enumeration.",
} as const;

export const $TransactionItem = {
  properties: {
    item: {
      anyOf: [
        {
          $ref: "#/components/schemas/Internal",
        },
        {
          $ref: "#/components/schemas/Deposit",
        },
        {
          $ref: "#/components/schemas/Sending",
        },
        {
          $ref: "#/components/schemas/External",
        },
        {
          $ref: "#/components/schemas/ForEx",
        },
      ],
      title: "Item",
    },
    notes: {
      items: {
        $ref: "#/components/schemas/Note",
      },
      type: "array",
      title: "Notes",
    },
  },
  type: "object",
  required: ["item", "notes"],
  title: "TransactionItem",
} as const;

export const $TransactionRequest = {
  properties: {
    currency: {
      $ref: "#/components/schemas/Currency",
    },
    amount: {
      $ref: "#/components/schemas/Amount",
    },
    charges: {
      $ref: "#/components/schemas/Amount",
    },
    message: {
      type: "string",
      title: "Message",
    },
    transaction_type: {
      $ref: "#/components/schemas/TransactionType",
    },
    data: {
      oneOf: [
        {
          $ref: "#/components/schemas/InternalRequest",
        },
        {
          $ref: "#/components/schemas/DepositRequest",
        },
        {
          $ref: "#/components/schemas/ExternalRequest",
        },
        {
          $ref: "#/components/schemas/SendingRequest",
        },
        {
          $ref: "#/components/schemas/ForExRequest",
        },
      ],
      title: "Data",
      discriminator: {
        propertyName: "type",
        mapping: {
          INTERNAL: "#/components/schemas/InternalRequest",
          DEPOSIT: "#/components/schemas/DepositRequest",
          EXTERNAL: "#/components/schemas/ExternalRequest",
          SENDING: "#/components/schemas/SendingRequest",
          FOREX: "#/components/schemas/ForExRequest",
        },
      },
    },
  },
  type: "object",
  required: ["amount"],
  title: "TransactionRequest",
} as const;

export const $TransactionResponse = {
  properties: {
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Rate",
      strict: true,
    },
    code: {
      type: "string",
      maxLength: 64,
      title: "Code",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    charges: {
      type: "number",
      title: "Charges",
    },
    notes: {
      type: "string",
      title: "Notes",
    },
  },
  type: "object",
  required: ["amount", "rate", "code", "state", "type"],
  title: "TransactionResponse",
} as const;

export const $TransactionReviewReq = {
  properties: {
    currency: {
      $ref: "#/components/schemas/Currency",
    },
    amount: {
      $ref: "#/components/schemas/Amount",
    },
    charges: {
      $ref: "#/components/schemas/Amount",
    },
    message: {
      type: "string",
      title: "Message",
    },
    transaction_type: {
      $ref: "#/components/schemas/TransactionType",
    },
    data: {
      oneOf: [
        {
          $ref: "#/components/schemas/InternalRequest",
        },
        {
          $ref: "#/components/schemas/DepositRequest",
        },
        {
          $ref: "#/components/schemas/ExternalRequest",
        },
        {
          $ref: "#/components/schemas/SendingRequest",
        },
        {
          $ref: "#/components/schemas/ForExRequest",
        },
      ],
      title: "Data",
      discriminator: {
        propertyName: "type",
        mapping: {
          INTERNAL: "#/components/schemas/InternalRequest",
          DEPOSIT: "#/components/schemas/DepositRequest",
          EXTERNAL: "#/components/schemas/ExternalRequest",
          SENDING: "#/components/schemas/SendingRequest",
          FOREX: "#/components/schemas/ForExRequest",
        },
      },
    },
    code: {
      type: "string",
      title: "Code",
    },
    type: {
      $ref: "#/components/schemas/TransactionType",
    },
    state: {
      allOf: [
        {
          $ref: "#/components/schemas/ValidationState",
        },
      ],
      nullable: false,
    },
    notes: {
      type: "string",
      title: "Notes",
    },
  },
  type: "object",
  required: ["amount", "code", "type", "state"],
  title: "TransactionReviewReq",
} as const;

export const $TransactionState = {
  enum: ["REVIEW", "PENDING", "PAID", "CANCELLED", "REJECTED"],
  title: "TransactionState",
  description: "An enumeration.",
} as const;

export const $TransactionType = {
  enum: ["DEPOSIT", "INTERNAL", "EXTERNAL", "SENDING", "FOREX"],
  title: "TransactionType",
  description: "An enumeration.",
} as const;

export const $UpdateEmployeeListRequest = {
  properties: {
    employees: {
      items: {
        $ref: "#/components/schemas/EmployeeResponse",
      },
      type: "array",
      title: "Employees",
    },
  },
  type: "object",
  required: ["employees"],
  title: "UpdateEmployeeListRequest",
  description: "Update employee list request.",
} as const;

export const $UpdateOffice = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    country: {
      type: "string",
      title: "Country",
    },
    currencies: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Currencies",
    },
    baseCurrency: {
      type: "string",
      title: "Basecurrency",
    },
    mainCurrency: {
      type: "string",
      title: "Maincurrency",
    },
  },
  type: "object",
  title: "UpdateOffice",
} as const;

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "integer",
          },
        ],
      },
      type: "array",
      title: "Location",
    },
    msg: {
      type: "string",
      title: "Message",
    },
    type: {
      type: "string",
      title: "Error Type",
    },
  },
  type: "object",
  required: ["loc", "msg", "type"],
  title: "ValidationError",
} as const;

export const $ValidationState = {
  enum: ["APPROVED", "REJECTED", "CANCELLED"],
  title: "ValidationState",
  description: "An enumeration.",
} as const;

export const $WalletTradingRequest = {
  properties: {
    walletID: {
      type: "string",
      title: "Walletid",
    },
    trading_type: {
      $ref: "#/components/schemas/TradingType",
    },
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    daily_rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Daily Rate",
      strict: true,
    },
    trading_rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Trading Rate",
      strict: true,
    },
    message: {
      type: "string",
      title: "Message",
    },
    request: {
      oneOf: [
        {
          $ref: "#/components/schemas/BuyRequest",
        },
        {
          $ref: "#/components/schemas/SellRequest",
        },
        {
          $ref: "#/components/schemas/ExchangeRequest",
        },
      ],
      title: "Request",
      discriminator: {
        propertyName: "request_type",
        mapping: {
          BUY: "#/components/schemas/BuyRequest",
          SELL: "#/components/schemas/SellRequest",
          EXCHANGE: "#/components/schemas/ExchangeRequest",
        },
      },
    },
  },
  type: "object",
  required: ["walletID", "trading_type", "amount", "daily_rate", "trading_rate", "request"],
  title: "WalletTradingRequest",
} as const;

export const $WalletTradingResponse = {
  properties: {
    walletID: {
      type: "string",
      title: "Walletid",
    },
    trading_type: {
      $ref: "#/components/schemas/TradingType",
    },
    amount: {
      type: "number",
      minimum: 0,
      title: "Amount",
      strict: true,
    },
    daily_rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Daily Rate",
      strict: true,
    },
    trading_rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Trading Rate",
      strict: true,
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    state: {
      $ref: "#/components/schemas/TransactionState",
    },
    created_by: {
      type: "string",
      format: "uuid",
      title: "Created By",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    reviwed_by: {
      type: "string",
      format: "uuid",
      title: "Reviwed By",
    },
    initial_balance: {
      type: "number",
      minimum: 0,
      title: "Initial Balance",
      strict: true,
    },
    account: {
      type: "string",
      title: "Account",
    },
    exchange_rate: {
      type: "number",
      exclusiveMinimum: 0,
      title: "Exchange Rate",
      strict: true,
    },
    exchange_walletID: {
      type: "string",
      title: "Exchange Walletid",
    },
    notes: {
      items: {
        additionalProperties: {
          anyOf: [
            {
              type: "object",
            },
            {},
          ],
        },
        type: "object",
      },
      type: "array",
      title: "Notes",
    },
  },
  type: "object",
  required: [
    "walletID",
    "trading_type",
    "amount",
    "daily_rate",
    "trading_rate",
    "id",
    "state",
    "created_by",
    "created_at",
    "initial_balance",
  ],
  title: "WalletTradingResponse",
} as const;
